%%
%% Регулярни изрази (epsilon ?)
%% R ::= atom | star(R1) | or(R1,R2) | conc(R1,R2)
%%
%%


%%
%% слепване(L1,L2,M) - M = конкатенацията на списъците L1 и L2, т.е. M = L1.L2
%%
%% Условие - дължината на L1 или дължината на M е известна
%%
слепване([],L,L).
слепване([A|Rest],L2,[A|M]) :- слепване(Rest,L2,M).


%%
%% налучква(R,W) - думата W се разпознава от регулярния израз R
%% 
%% Изискване - известен е регулярния израз R
%% 
%% налучква(eps, []).

налучква(X,[X]) :- atom(X).

налучква(star(_),[]).
налучква(star(R),X) :- слепване(X1,X2,X), налучква(R,X1), налучква(star(R),X2).

налучква(or(R1,_),X) :- налучква(R1,X).
налучква(or(_,R2),X) :- налучква(R2,X).

налучква(conc(R1,R2),X) :- слепване(X1,X2,X), налучква(R1,X1), налучква(R2,X2).
%%
%% Един от проблемите е, че налучква(R,W) може да не генерира всички думи разпознавани от R.
%% ?- налучква(star(or(a,b)), W).
%% W = [] ;
%% W = [a] ;
%% W = [a, a] ;
%% W = [a, a, a] ;
%% W = [a, a, a, a] ;
%% W = [a, a, a, a, a] ;
%% W = [a, a, a, a, a, a] ;
%% W = [a, a, a, a, a, a, a] ;
%% W = [a, a, a, a, a, a, a, a] ;
%% W = [a, a, a, a, a, a, a, a, a] ;
%% W = [a, a, a, a, a, a, a, a, a|...] ;
%% W = [a, a, a, a, a, a, a, a, a|...] ;
%% W = [a, a, a, a, a, a, a, a, a|...] .
%%
%%
%% Друг проблем е, че налучква(R,W) не знае кога да спре.
%% ?- налучква(conc(a,b),W).
%% W = [a, b] ;
%% <безкрайно_изчисление>
%% 

%%
%% nat(X) - X е естествено число
%% 

ест(0).
ест(N) :- ест(N1), N is N1+1.

%% налучква_дълбоко(eps, [], N) :- N > 0.

налучква_дълбоко(X, [X], N) :- atom(X), N > 0.

налучква_дълбоко(star(_), [], N) :- N > 0.
налучква_дълбоко(star(A), X, N) :- налучква_дълбоко(conc(A,star(A)), X, N).

налучква_дълбоко(or(A,_), X, N) :- N1 is N - 1, налучква_дълбоко(A, X, N1).
налучква_дълбоко(or(_,B), X, N) :- N1 is N - 1, налучква_дълбоко(B, X, N1).

налучква_дълбоко(conc(A,B),X,N) :- N1 is N-1, налучква_дълбоко(A,X1,N1), налучква_дълбоко(B,X2,N1), слепване(X1,X2,X).

%%
%% 
%% 
полуналучква(Reg, Word) :- ест(N), N1 is N+1, налучква_дълбоко(Reg, Word, N1), not(налучква_дълбоко(Reg, Word, N)).
%%
%% Сега вече се генерират всички думи,
%%
%% ?- полуналучква(star(or(a,b)),W).
%% W = [] ;
%% W = [a] ;
%% W = [b] ;
%% W = [a, a] ;
%% W = [a, b] ;
%% W = [b, a] ;
%% W = [b, b] ;
%% W = [a, a, a] ;
%% W = [a, a, b] ;
%% W = [a, b, a] ;
%% W = [a, b, b] ;
%% W = [b, a, a] ;
%% W = [b, a, b] ;
%% W = [b, b, a] ;
%% W = [b, b, b] ;
%% W = [a, a, a, a] ;
%% W = [a, a, a, b] ;
%% W = [a, a, b, a] ;
%% ...................
%% 
%% Но нямаме гаранция, че ще спрем.
%% ?- полуналучква(conc(a,b),W).
%% W = [a, b] ;
%% <безкрайно_изчисление>

%%
%% епсилон(R) - Регулярният израз R разпознава празната дума
%% 
%% епсилон(eps).
епсилон(star(_)).
епсилон(or(A,_)) :- епсилон(A).
епсилон(or(_,B)) :- епсилон(B).
епсилон(conc(A,B)) :- епсилон(A),епсилон(B).

%% брой(eps,0).
%% брой(X,1) :- atom(X).
%% брой(or(A,B),N) :- брой(A,N1), брой(B,N2), N is N1+N2.
%% брой(conc(A,B),N) :- брой(A,N1), брой(B,N2), N is N1*N2.
%% брой(star(eps),1).


%% макс_дължина(eps,0).
макс_дължина(X,1) :- atom(X).
макс_дължина(or(A,B),N) :- макс_дължина(A,N1), макс_дължина(B,N2), N is max(N1,N2).
макс_дължина(conc(A,B),N) :- макс_дължина(A,N1), макс_дължина(B,N2), N is N1+N2.
макс_дължина(star(eps),1).

%% крайно(eps).
%% крайно(X) :- atom(X).
%% крайно(or(A,B)) :- крайно(A), крайно(B).
%% крайно(conc(A,B)) :- крайно(A), крайно(B).
%% крайно(star(eps)).


%% ограничение(eps,1).
%% ограничение(X,1) :- atom(X).
%% ограничение(star(eps),1).
%% ограничение(or(A,B),N) :- ограничение(A,N1), ограничение(B,N2), N < N1+N2, 0 < N.
%% ограничение(conc(A,B),N) :- ограничение(A,N1), ограничение(B,N2), N < N1*N2, 0 < N.

%%
%% Опростени регулярни изрази, т.е. регулярни изрази без епсилони
%%
%% R ::= atom  | plus(R1) | conc(R1,R2) | or(R1,R2)
%% 

опрост(X,X) :- atom(X).         % да се изключи eps ?

опрост(star(A), plus(B)) :- опрост(A,B).

опрост(or(A1,A2),or(B1,B2)) :- опрост(A1,B1), опрост(A2,B2).

опрост(conc(A1,A2),conc(B1,B2)) :- опрост(A1,B1), опрост(A2,B2), not(епсилон(A1)), not(епсилон(A2)).
опрост(conc(A1,A2),or(B1,conc(B1,B2))) :- опрост(A1,B1), опрост(A2,B2), not(епсилон(A1)), епсилон(A2).
опрост(conc(A1,A2),or(B2,conc(B1,B2))) :- опрост(A1,B1), опрост(A2,B2), епсилон(A1), not(епсилон(A2)).
опрост(conc(A1,A2),or(B1,or(B2,conc(B1,B2)))) :- опрост(A1,B1), опрост(A2,B2), епсилон(A1), епсилон(A2).


%%
%% разпознава(R,W,N) - думата W се разпознава от регулярния израз R като дълбочината на търсенето е N
%% 
%% Условие - известен е регулярният израз R.
%% 
разпознава_дълбоко(X,[X],N) :- atom(X), N > 0.
разпознава_дълбоко(plus(R),W,N) :- N1 is N-1, разпознава_дълбоко(R,W,N1).
разпознава_дълбоко(plus(R),W,N) :- N1 is N-1, разпознава_дълбоко(R,W1,N1), разпознава_дълбоко(plus(R),W2,N1), слепване(W1,W2,W).
разпознава_дълбоко(or(R1,_),W,N) :- N1 is N-1, разпознава_дълбоко(R1,W,N1).
разпознава_дълбоко(or(_,R2),W,N) :- N1 is N-1,разпознава_дълбоко(R2,W,N1).
разпознава_дълбоко(conc(R1,R2),W,N) :- N1 is N-1, разпознава_дълбоко(R1,W1,N1), разпознава_дълбоко(R2,W2,N1), слепване(W1,W2,W).


%%
%% полуразпознава(R,W) - думата W се разпознава от R
%% 

полуразпознава(R,[]) :- епсилон(R).
полуразпознава(R,W) :- опрост(R,R1), ест(N), N1 is N+1, разпознава_дълбоко(R1,W,N1), not(разпознава_дълбоко(R1,W,N)).

%% Пак не става :(


?- use_module(library(clpfd)).

разпознава_дълго(X,[X],1) :- atom(X).
разпознава_дълго(plus(R),W,N) :- разпознава_дълго(R,W,N).
разпознава_дълго(plus(R),W,N) :- N #= N1+N2, N1 #> 0, N2 #> 0, разпознава_дълго(R,W1,N1), разпознава_дълго(plus(R),W2,N2), слепване(W1,W2,W).
разпознава_дълго(or(R1,_),W,N) :- разпознава_дълго(R1,W,N).
разпознава_дълго(or(_,R2),W,N) :- разпознава_дълго(R2,W,N).
разпознава_дълго(conc(R1,R2),W,N) :- N #= N1+N2, N1 #> 0, N2 #> 0, разпознава_дълго(R1,W1,N1), разпознава_дълго(R2,W2,N2), слепване(W1,W2,W).


%%
%% Как да махнем cut?
%% 
%% дълж([],0).
%% дълж([_|Rest],N) :- дълж(Rest,K), N is K+1,!.

дълж([],0).
дълж([_|Rest],N) :- N1 #= N - 1, N #> 0, дълж(Rest,N1).


разпознава(R,[]) :- епсилон(R).
разпознава(R,W) :- not(крайно(R)), опрост(R,R1), length(W,N), разпознава_дълго(R1,W,N).
разпознава(R,W) :- крайно(R), опрост(R,R1), макс_дължина(R,K), N #=< K, дълж(W,N), разпознава_дълго(R1,W,N).
