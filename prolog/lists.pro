%%
%% Конкатенация на списъци
%%

конкат([], Y, Y).
конкат([X|Rest], Y, [X|Tail]) :- конкат(Rest, Y, Tail).


%%
%% concat прилича все едно е дефинирана на функционален език
%% На пролог получаваме нещо повече. Можем да зададем следния въпрос:
%% ?- конкат(X,Y,[1,2,3,4]).


член(A,L) :- конкат(_, [A|_], L).

%%
%% пръв(A,L) :- конкат([A],_,L).
%%
пръв(A,L) :- L = [A|_].

%
%втори(A,L) :- конкат([_,A],_,L).
%
втори(A,L) :- L = [_,A|_].

последен(A,L) :- конкат(_, [A], L).

предпоследен(A,L) :- конкат(_,[A,_],L).


вмък(L,A,M) :- конкат(L1,L2,L), конкат(L1,[A|L2],M).

пермутация([],[]).
пермутация([A|Rest],L) :- пермутация(Rest,L1), вмък(L1,A,L).

равна_дължина([],[]).
равна_дължина([_|Rest],[_|Tail]) :- равна_дължина(Rest,Tail).

хубава_пермутация(X,Y) :- равна_дължина(X,Y), пермутация(X,Y).

обрат([],[]).
обрат([A|A1], B) :- конкат(B1,[A],B), обрат(A1,B1).

нов_обрат(X,Y) :- равна_дължина(X,Y), обрат(X,Y).


палиндром(X) :- обрат(Y,Z), конкат(Y,Z,X).
