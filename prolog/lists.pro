%% сортиран(X) - списъкът X е сортиран
%% 
%% Условие - дължината на X е известна

сортиран([]).
сортиран([_]).
сортиран([A,B|Rest]) :- A =< B, сортиран([B|Rest]).

%%
%% Тук важното е, че за да се прави сравнение от вида A =< B трябва и двете променливи да имат стойности.
%% 

%%
%% пръв(A,L) :- конкат([A],_,L).
%%
пръв(A,L) :- L = [A|_].

%
%втори(A,L) :- конкат([_,A],_,L).
%
втори(A,L) :- L = [_,A|_].

трети(A,L) :- L = [_,_,A|_].

%% Намиране на последния елемент A на списъка L
%% последен(A,L).
%%
%% Условие - дължината на L е известна

последен(A,[A]).
последен(A,[_|Rest]) :- последен(A,Rest).

%% Възможно е да не знаем конкретните стойности на елементите на L
%% 
%% ?- последен(A,[X,Y,Z]).
%% A = Z ;
%% false.
%% 
%%
%% Каква е разликата с тази дефиниция ?

последен2(A,[A]) :- !.
последен2(A,[_|Rest]) :- последен2(A,Rest).

предпоследен(A,[A,_]).
предпоследен(A,[_|Rest]) :- предпоследен(A,Rest).


%%
%% M = конкатенацията на списъците L1 и L2
%%
%% конкат(L1,L2,M)
%%
%% Условие - дължината на L1 или дължината на M е известна

конкат([],L,L).
конкат([A|Rest],L,[A|M]) :- конкат(Rest,L,M).


предпоследен2(A,L) :- конкат(_,[A,_],L).

%%
%% обрат(X,Y) - Y представлява списък с елементите на X в обратен ред.
%%
%% Условие - известна е дължината на X
%% 
обрат([],[]).
обрат([A|X], Y) :- обрат(X,Z), конкат(Z,[A],Y).


палиндром(X) :- обрат(X,X).


%%
%% равна_дължина(X,Y) - списъците X и Y имат равни дължини.
%%
%% Условие - известна е дължината на X или Y.
%% 
равна_дължина([],[]).
равна_дължина([_|Rest],[_|Tail]) :- равна_дължина(Rest,Tail).
%% 
%% ?- равна_дължина([A,B,C],[X,Y,Z]).
%% true.
%% 

%%
%% Условие - известна е дължината на X или Y.
%% 
хубав_обрат([],[]).
хубав_обрат(X,Y) :- равна_дължина(X,Y), обрат(X,Y).
%% 
%% ?- хубав_обрат([A,B,C],[X,Y,Z]).
%% A = Z,
%% B = Y,
%% C = X.

%% 
%% елем(A,L) - A е елемент на L
%%
%% Условие - дължината на L е известна
%% 
елем(A,[A|_]).
елем(A,[_|Rest]) :- елем(A,Rest).

%% 
%% ?- елем(f(X),[1,2,f(a),g(c),C]).
%% X = a ;
%% C = f(X) ;
%% false.
%% 

%% 
%% Алтернативна дефиниция
%% 
елем2(A,L) :- конкат(_, [A|_], L).

%% 
%% подсписък(L,M) - L е подсписък на M, т.е. M = X.L.Y
%%
%% Условие - дължината на M е известна
%% 
подсписък(L,M) :- конкат(L1,_,M), конкат(_,L,L1).
%% 
%% ?- подсписък([A,f(A)],[f(a),X,f(f(b))]).
%% A = f(a),
%% X = f(f(a)) ;
%% A = X, X = f(b) ;
%% false.
%% 

%%
%% Какъв е проблемът с тази дефиниция?
%%
подсписък2(L,M) :- конкат(_,L,L1), конкат(L1,_,M).
%%
%% В конкат(_,L,L1) трябва да знаем дължината или на първия или на третия аргумент,
%% но ние не знаем нищо подобно.
%% 

%%
%% Какви са отговорите на въпроса
%% ?- подсписък3(L,[1,2,3]).
%% 
подсписък3(L,M) :- конкат(_,L,L1), !, конкат(L1,_,M).

%% 
%% подмножество(X,Y) - 
%% X е подмножество на Y точно тогава, когато (forall a)[a in X -> a \in Y]
%% Условие - дължината на X и Y е известна
%% 
подмножество([],_).
подмножество([A|Rest], Y) :- елем(A,Y), подмножество(Rest,Y).


%%
%% Не е добре да се ползва not
%%  
подмножество2(X,Y) :- not((елем(A,X), not(елем(A,Y)))). 



%%
%% вмък(A,X,Y) - Y се получава от X като вмъкнем A на произволно място в X
%%
%% Условие - дължината на X или Y е известна
%% 
вмък(A,X,[A|X]).
вмък(A,[B|X],[B|Y]) :- вмък(A,X,Y).


%% 
%% пермутация(X,Y) - Y е пермутация на X
%%
%% Условие - дължината на X е известна 
%% 
пермутация([],[]).
пермутация([A|X],Y) :- пермутация(X,Z), вмък(A,Z,Y).

%% 
%% пермутация2(X,Y) - Y е пермутация на X
%%
%% Условие - дължината на Y е известна
%% 
пермутация2([],[]).
пермутация2([A|X],Y) :- вмък(A,Z,Y), пермутация2(X,Z).

%% 
%% сортиране(X,Y) - Y е сортирана пермутация на X
%%
%% Условие - дължината на X е известна
%% 
сортиране(X,Y) :- пермутация(X,Y), сортиран(Y).



%%
%% минизмък(A,X,Y) - Y се получава от X като измъкнем най-малкия елемент А от X
%%
%% Условие - известни са елементите на X или е известен елементът A и елементите на Y
%% 
минизмък(A,[A],[]).
минизмък(A,[A|X],X) :- минизмък(B,X,_), A =< B.
минизмък(A,[B|X],[B|Y]) :- минизмък(A,X,Y), A =< B, елем(A,X).

%% 
%% сортизмък(X,Y) - списъкът Y е резултатът от сортирането на X
%%
%% Условие - известни са елементите на X
%% 
сортизмък([],[]).
сортизмък(X, [A|Y]) :- минизмък(A,X,Rest), сортизмък(Rest, Y).


%%
%% сортвмък(A,X,Y) - Вмъкваме A в сортирания списък X, така че да получим сортиран списък Y
%% 
%% Условие - известен е елементът A и са известни елементита на X или Y.
%% 
сортвмък(A,[],[A]).
сортвмък(A,[B|X],[A,B|X]) :- A =< B.
сортвмък(A,[B|X],[B|Y]) :- B < A, сортвмък(A,X,Y).


%%
%% минмакс(A,B,C,D) - C = min(A,B) & D = max(A,B)
%%
%% Условие - числата A и B са известни
минмакс(A,B,A,B) :- A =< B.
минмакс(A,B,B,A) :- B < A.

%%
%% Втори вариант
%%
%% сортвмък2(A,X,Y) - Вмъкваме A в сортирания списък X, така че да получим сортиран списък Y
%%
%% Условие - Известен е елементът A и елементите на X (тук имаме разлика с първата версия)
%% 
сортвмък2(A,[],[A]).
сортвмък2(A, [B|X], [C|Y]) :- минмакс(A,B,C,D), сортвмък2(D,X,Y).

%%
%% сорт3(X,Y) - Y е сортирана пермутация на X
%%
%% Условие - известни са елементите на списъка X
%% 
сорт3([],[]).
сорт3([A|Rest], Y) :- сорт3(Rest,X), сортвмък(A,X,Y).
