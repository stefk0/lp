%% 
%% Целият свят, за който знае пролог, е един краен граф описан със следните факти:
%% 

връх(g1,a). връх(g1,b). връх(g1,c). връх(g1,d). връх(g1,e).
връх(g1,f). връх(g1,g). връх(g1,u). връх(g1, t). връх(g1, v).

връх(g2,a). връх(g2,b). връх(g2,c). връх(g2,d). връх(g2,e). връх(g2,f).

ребро(g1,a,b). ребро(g1,b,c). ребро(g1,c,d). ребро(g1,d,b).
ребро(g1,a,e). ребро(g1,e,f). ребро(g1,f,g). ребро(g1,g,e).
ребро(g1,u,c).


%%
%% Нека имаме и още един граф, в който няма цикли
%%
ребро(g2,a,b). ребро(g2,b,c). ребро(g2,c,d). ребро(g2,e,b). ребро(g2, f, a).


%%
%% изолиран(G,X) - X е изолиран връг в графа G
%%
изолиран(G,X) :- връх(G,X), not(ребро(G,X,Y)), not(ребро(G,Y,X)).


%%
%% има_път(G,X,Y) - съществува път между върховете X и Y в графа G
%% 
%% Условие - графът G е ацикличен
%% 
има_път(G,X,X) :- връх(G,X).
има_път(G,X,Y) :- ребро(G,X,Z), има_път(G,Z,Y).

има_път2(G,X,X) :- връх(G,X).
има_път2(G,X,Y) :- има_път2(G,Z,Y), ребро(G,X,Z).


%% В g2 е лесно, защото няма цикли:
%% ?- има_път(g2, a, f).
%% false
%% ?- има_път(g2, a, d).
%% true;
%% false.

%% В g1 имаме проблем, защото имаме цикли:
%% ?- има_път(g1, a, d).
%% true;
%% true;
%% true;
%% ...
%% Това е още по-неприятно:
%% ?- има_път(g1, a, u).
%% <безкраен_цикъл>
%%


%%
%% път(G,P) - P е път в G
%%
%% P е път <=> (forall X)(forall Y)[P = [..,X,Y,..] => ребро(X,Y)]
%%         <=> (forall X)(forall Y)[P =\= [..,X,Y,..] \/ ребро(X,Y)]
%%         <=> not (exists X)(exists Y)[P = [..,X,Y,..] & not ребро(X,Y)]
%% 
път(G,P) :- not((конкат(_,[X,Y|_],P), not(ребро(G,X,Y)))).
%%
%% Този предикат е разпознавател, но защо не е генератор?
%% 



прост_път(G,X,Y) :- път_забрана(G,X,Y,[]).

път_забрана(G,X,X,V) :-
    връх(G,X), не_вътре(X,V).

път_забрана(G,X,Y,V) :-
    не_вътре(X,V), ребро(G,X,Z), път_забрана(G,Z,Y,[X|V]).


не_вътре(_,[]).
не_вътре(X, [Y|Rest]) :- dif(X,Y), не_вътре(X,Rest).




%% има_път(G,X,X,[X]) :- връх(G,X).
%% има_път(G,X,Y,[X|Rest]) :- ребро(G,X,Z), има_път(G,Z,Y,Rest).

%%
%% ?- има_път(g1,a,u,X).
%% <безкраен_цикъл>

